(var *ctx* {})

;;; Some useful functions
;; [a b c d e f ...] ‚áí (values [a c e ...] [b d f ...])
(fn split-odd-array [arr]
  (assert (= (% (length arr) 2) 0) "expected odd number of arguments")
  (let [N (/ (length arr) 2)]
    (var res‚ÇÅ []) (var res‚ÇÇ [])
    (for [i 1 N]
      (tset res‚ÇÅ i (. arr (- (* i 2) 1)))
      (tset res‚ÇÇ i (. arr (* i 2))))
    (values res‚ÇÅ res‚ÇÇ)))

;; [a b c d ...] ‚àß [A B C D ...] ‚áí {a A b B c C d D ...}
(fn make-dict [keys vals]
  (var res {})
  (for [i 1 (length keys)]
    (tset res (. keys i) (. vals i)))
  res)

;; should be replaced with something more efficient
(fn copy [T]
  (if (table? T)
    (do (var res {})
        (each [id x (pairs T)]
          (tset res id (copy x)))
        res)
    T))

;; tbl‚ÇÇ has priority here
(fn union [tbl‚ÇÅ tbl‚ÇÇ]
  (var res {})
  (each [idx val (pairs tbl‚ÇÅ)]
    (tset res idx val))
  (each [idx val (pairs tbl‚ÇÇ)]
    (tset res idx val))
  res)

(fn pop-last [arr]
  (table.remove arr (length arr)))

(fn push-last [arr x]
  (table.insert arr (length arr) x))

(fn map-1-in-2-out [f lst]
  (var res‚ÇÅ []) (var res‚ÇÇ [])
  (each [_ x (ipairs lst)]
    (let [(fst snd) (f x)]
      (table.insert res‚ÇÅ fst)
      (table.insert res‚ÇÇ snd)))
  (values res‚ÇÅ res‚ÇÇ))

(fn foreach-2 [f lst‚ÇÅ lst‚ÇÇ]
  (assert (= (length lst‚ÇÅ) (length lst‚ÇÇ))
    "map-2-in-1-out accepts only lists with equal length")
  (for [i 1 (length lst‚ÇÅ)]
    (f (. lst‚ÇÅ i) (. lst‚ÇÇ i))))

(fn map [f lst]
  (var lst‚Ä≤ [])
  (each [_ x (ipairs lst)]
    (table.insert lst‚Ä≤ (f x)))
  lst‚Ä≤)

(fn sym= [term template]
  (= (tostring term) template))

(fn any-2 [f lst‚ÇÅ lst‚ÇÇ]
  (var good? true) (var i 1)
  (while (and good? (<= i (length lst‚ÇÅ)))
    (let [(x y) (values (. lst‚ÇÅ i) (. lst‚ÇÇ i))]
      (set good? (f x y)))
    (set i (+ i 1)))
  good?)

(fn tset-truth [tbl name body]
  (tset tbl name body) true)

(fn get [tbl name default]
  (or (. tbl name) default))

(fn function? [val]
  (= (type val) :function))

(fn non-empty? [tbl] (not= (next tbl) nil))

(fn gensym-str [] (tostring (gensym)))

(fn warn [str]
  (io.stderr:write (.. str "\n")))

;;; Type checker configuration
(local primitive-types
  {"real"   :number
   "string" :string
   "bool"   :boolean
   "‚Ñù"      :number
   "ùîπ"      :boolean})

(local complex-types
  {"->" :function
   "‚Üí"  :function})

(local type-variable-valid-characters
  (.. "ŒëŒíŒìŒîŒïŒñŒóŒòŒôŒöŒõŒúŒùŒûŒüŒ†Œ°Œ£Œ§Œ•Œ¶ŒßŒ®Œ©"
      "Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒπŒ∫ŒªŒºŒΩŒæŒøœÄœÅœÉœÇœÑœÖœÜœáœàœâ"
      "0123456789"
      "‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ"
      "‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ"))

;;; Functions over types
(fn primitive-type? [œÑ]
  (match œÑ
    :nil      true
    :number   true
    :string   true
    :boolean  true
    :table    true
    :thread   true
    :userdata true
    _         false))

(fn complex-type? [œÑ]
  (and (table? œÑ) œÑ.constr))

(fn type-variable? [œÑ]
  (and (table? œÑ) œÑ.name))

(fn type-operator? [œÑ]
  (or (primitive-type? œÑ)
      (complex-type? œÑ)))

(fn pprint-type [œÑ]
  (if (complex-type? œÑ)
      (string.format "(%s %s)" œÑ.constr
        (table.concat (map pprint-type œÑ.args) " "))
      (type-variable? œÑ) œÑ.display-name
      œÑ))

;;; Common error messages
(local unknown-type-error
  (partial string.format "unknown type ‚Äú%s‚Äù"))

(local unknown-variable-error
  (partial string.format "unknown variable ‚Äú%s‚Äù"))

(fn mismatched-type-error [expr expected-type type-here]
  (string.format (.. "expression ‚Äú%s‚Äù was expected to have type ‚Äú%s‚Äù, "
                     "but has type ‚Äú%s‚Äù")
                 (tostring expr)
                 (pprint-type expected-type)
                 (pprint-type type-here)))

(fn constrain-warning [wherein type-variable-name œÑ]
  (string.format
    (.. "warning: in ‚Äú%s‚Äù: "
        "the type variable ‚Äú%s‚Äù has been constrained to be type ‚Äú%s‚Äù.")
    wherein type-variable-name (pprint-type œÑ)))

;;; Convert S-expression (some type) into internal representation
(fn parse-complex-type [parser lst]
  (match lst [type-constr & args]
    (let [type-constr‚Ä≤ (tostring type-constr)
          type-desc (. complex-types type-constr‚Ä≤)
          args‚Ä≤ (map parser args)]
      (assert (sym? type-constr) "invalid syntax")
      (assert (> (length args‚Ä≤) 1) "function type must have at least 2 arguments")
      (assert type-desc (unknown-type-error type-constr‚Ä≤))
      {:constr type-desc :args args‚Ä≤})))

(local type-variable-regex
  (string.format "^[%s]+$" type-variable-valid-characters))

(fn parse-type-variable [type-name salt]
  (when (type-name:match type-variable-regex)
    {:display-name type-name :name (.. type-name salt)}))

(fn parse-type [salt type]
  (let [type‚Ä≤ (tostring type)]
    (if (sym? type)
        (or (. primitive-types type‚Ä≤)
            (parse-type-variable type‚Ä≤ salt)
            (error (unknown-type-error type‚Ä≤)))
        (list? type) (parse-complex-type (partial parse-type salt) type)
        (error (unknown-type-error type‚Ä≤)))))

;;; S-expression parsing
(fn parse-annotated-variable [salt term]
  (assert (= (length term) 3)
          "invalid type declaration syntax")
  (match term [name sep œÑ]
    (do (assert (sym= sep ":") "‚Äú:‚Äù was not found in type declaration")
        (assert (sym? name) (string.format "‚Äú%s‚Äù is not a variable name"
                                           (tostring name)))
        (values name (parse-type salt œÑ)))))

(fn parse-lam [salt body]
  (var args-ann []) (var sep? false)
  (while (and (not sep?) (non-empty? body))
    (let [arg (table.remove body 1)]
      (if (sym= arg "‚Ü¶")
          (set sep? true)
          (table.insert args-ann arg))))

  (let [(args types)
        (map-1-in-2-out (partial parse-annotated-variable salt) args-ann)]
    (assert sep? "invalid Œª-syntax")
    (values args types body)))

(fn elim-term [term app lam variable atom]
  (if (list? term)
    (match term [f & args]
      (if (sym= f "Œª") (lam args) (app f args)))
    (sym? term) (variable term)
    (atom term)))

;;; Type inference and unification
(fn prune [S œÑ]
  (if (type-variable? œÑ) (get S œÑ.name œÑ)
      (complex-type? œÑ) {:constr œÑ.constr :args (map (partial prune S) œÑ.args)}
      œÑ))

(fn unify [S T‚ÇÅ T‚ÇÇ]
  (let [œÑ‚ÇÅ (prune S T‚ÇÅ) œÑ‚ÇÇ (prune S T‚ÇÇ)]
    (if (type-variable? œÑ‚ÇÅ)
        (tset-truth S œÑ‚ÇÅ.name œÑ‚ÇÇ)

        (and (type-operator? œÑ‚ÇÅ) (type-variable? œÑ‚ÇÇ))
        (unify S œÑ‚ÇÇ œÑ‚ÇÅ)

        (and (primitive-type? œÑ‚ÇÅ) (primitive-type? œÑ‚ÇÇ))
        (= œÑ‚ÇÅ œÑ‚ÇÇ)

        (and (complex-type? œÑ‚ÇÅ) (complex-type? œÑ‚ÇÇ)
             (= œÑ‚ÇÅ.constr œÑ‚ÇÇ.constr)
             (= (length œÑ‚ÇÅ.args) (length œÑ‚ÇÇ.args)))
        (any-2 (partial unify S) œÑ‚ÇÅ.args œÑ‚ÇÇ.args))))

(fn infer-constant-type [context salt infer value]
  (if (or (table? value) (function? value))
      (error "non-primitive types are not implemeneted yet, sorry")
      (values value (type value))))

(fn infer-sym-type [context salt infer value]
  (let [type-here (. context (tostring value))]
    (assert type-here (unknown-variable-error (tostring value)))
    (values value type-here)))

(fn infer-ap [context salt infer f args]
  (let [(f‚Ä≤ function-type) (infer context salt f)
        (args‚Ä≤ types) (map-1-in-2-out (partial infer context salt) args)]
    (let [arg-types (copy function-type.args)
          ret-type (pop-last arg-types)]
      (assert (= (length arg-types) (length types))
              (string.format "not enough or more than required arguments for ‚Äú%s‚Äù"
                             (tostring f)))
      (var S {})
      (each [id type-here (ipairs types)]
        (let [expected-type (. arg-types id)]
          (assert (unify S expected-type type-here)
            (mismatched-type-error (. args id) expected-type type-here))))
      (values `(,f‚Ä≤ ,(unpack args‚Ä≤)) (prune S ret-type)))))

(fn infer-lam [context salt infer term]
  (let [(names types full-body) (parse-lam salt term)
        body (table.remove full-body)
        Œîcontext (make-dict (map tostring names) types)
        context‚Ä≤ (union context Œîcontext)
        (body‚Ä≤ ret-type) (infer context‚Ä≤ salt body)
        (full-body‚Ä≤ _) (map-1-in-2-out (partial infer context salt) full-body)]
    (push-last types ret-type)
    (values `(fn ,names ,(unpack full-body‚Ä≤) ,body‚Ä≤)
             {:constr :function :args types})))

(fn infer-type [context salt value]
  (elim-term value
    (partial infer-ap            context salt infer-type)
    (partial infer-lam           context salt infer-type)
    (partial infer-sym-type      context salt infer-type)
    (partial infer-constant-type context salt infer-type)))

;;; Type-constraint propagation
;;;  In definitions between type variables and concrete types
;;;  system chooses concrete types.
;;;  For example, if we first define ‚Äúx : Œ±‚Äù,
;;;  then set ‚Äúx ‚âî 42‚Äù, system will re-define type of ‚Äúx‚Äù as ‚Äúreal‚Äù.
(fn get-constraints [S expected-type type-here]
  (if (and (type-variable? expected-type)
           (type-operator? type-here))
      (tset S expected-type.name type-here)
      (and (complex-type? expected-type)
           (complex-type? type-here))
      (foreach-2 (partial get-constraints S)
                 expected-type.args type-here.args)))

(fn constrain [def-name expected-type type-here]
  (var constraints {})
  (get-constraints constraints expected-type type-here)
  (each [key value (pairs constraints)]
    (warn (constrain-warning def-name key value)))
  (prune constraints expected-type))

(fn inplace-constrain [context def-name expected-type type-here]
  (let [œÑ (constrain def-name type-here expected-type)]
    (tset context def-name (constrain def-name expected-type œÑ))))

(fn define-constant [name value]
  (let [name-str (tostring name)
        salt (gensym-str)
        (value‚Ä≤ type-here) (infer-type *ctx* salt value)
        expected-type (. *ctx* name-str)]
    (if expected-type
      (do (assert (unify {} expected-type type-here)
                  (mismatched-type-error value expected-type type-here))
          (inplace-constrain *ctx* name-str expected-type type-here))
      (tset *ctx* name-str type-here))
    `(local ,name ,value‚Ä≤)))

(fn declare-type [name œÑ]
  (tset *ctx* (tostring name) (parse-type (gensym-str) œÑ)))

;;; Macro syntax
;; Fennel reads ":" in tables incorrectly
(local colon ":")
(local context-commands
  {colon  declare-type
   ":="   define-constant
   "‚âî"   define-constant})

(fn context-syntax [variable sep body]
  (assert (sym? sep) "invalid ‚ä¢-syntax")
  (let [sep‚Ä≤ (tostring sep)
        func (. context-commands sep‚Ä≤)]
    (assert func "unknown command")
    (func variable body)))

{"‚ä¢" context-syntax}